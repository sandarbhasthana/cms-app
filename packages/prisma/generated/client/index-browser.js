
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.13.0
 * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
 */
Prisma.prismaVersion = {
  client: "6.13.0",
  engine: "361e86d0ea4987e9f53a565309b3eed797a6bcbd"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.OrganizationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  orgId: 'orgId',
  name: 'name',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  action: 'action',
  actorId: 'actorId',
  targetUserId: 'targetUserId',
  orgId: 'orgId',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.CrewScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  firstName: 'firstName',
  lastName: 'lastName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  dateJoined: 'dateJoined',
  dateLeft: 'dateLeft',
  primaryDepartment: 'primaryDepartment',
  userId: 'userId',
  rank: 'rank',
  status: 'status'
};

exports.Prisma.CrewOnboardingDraftScalarFieldEnum = {
  id: 'id',
  crewId: 'crewId',
  data: 'data',
  status: 'status',
  updatedAt: 'updatedAt',
  organizationId: 'organizationId'
};

exports.Prisma.VesselScalarFieldEnum = {
  id: 'id',
  name: 'name',
  imoNumber: 'imoNumber',
  capacity: 'capacity',
  homePort: 'homePort',
  vesselType: 'vesselType',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  bhpKw: 'bhpKw',
  companyName: 'companyName',
  dwt: 'dwt',
  flag: 'flag',
  grt: 'grt',
  tonnageValue: 'tonnageValue',
  ums: 'ums',
  yearBuilt: 'yearBuilt',
  orgId: 'orgId',
  engineMake: 'engineMake',
  tonnageUnit: 'tonnageUnit',
  callSign: 'callSign',
  mmsi: 'mmsi',
  inspectionDueDate: 'inspectionDueDate',
  isActive: 'isActive'
};

exports.Prisma.VesselUserRoleMapScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  vesselId: 'vesselId',
  userId: 'userId',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VesselRankRequirementScalarFieldEnum = {
  id: 'id',
  vesselId: 'vesselId',
  role: 'role',
  requiredCount: 'requiredCount',
  orgId: 'orgId'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  crewId: 'crewId',
  type: 'type',
  fileName: 'fileName',
  url: 'url',
  uploadedAt: 'uploadedAt',
  issueDate: 'issueDate',
  expiryDate: 'expiryDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  orgId: 'orgId'
};

exports.Prisma.VesselAssignmentScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  vesselId: 'vesselId',
  crewId: 'crewId',
  role: 'role',
  assignedAt: 'assignedAt',
  releasedAt: 'releasedAt'
};

exports.Prisma.ConsultancyPartnerScalarFieldEnum = {
  id: 'id',
  name: 'name',
  category: 'category',
  contactEmail: 'contactEmail',
  approvedBy: 'approvedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TrainingPartnerScalarFieldEnum = {
  id: 'id',
  name: 'name',
  contactEmail: 'contactEmail',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CourseScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  trainingType: 'trainingType',
  partnerId: 'partnerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TrainingRecordScalarFieldEnum = {
  id: 'id',
  crewId: 'crewId',
  courseId: 'courseId',
  dateTaken: 'dateTaken',
  expiryDate: 'expiryDate',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  orgId: 'orgId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Role = exports.$Enums.Role = {
  SUPER_ADMIN: 'SUPER_ADMIN',
  ADMIN: 'ADMIN',
  HR: 'HR',
  SCHEDULER: 'SCHEDULER',
  PAYROLL: 'PAYROLL',
  CREW: 'CREW',
  AUDITOR: 'AUDITOR',
  COMPLIANCE_VIEWER: 'COMPLIANCE_VIEWER',
  CREW_COORDINATOR: 'CREW_COORDINATOR'
};

exports.VesselDepartment = exports.$Enums.VesselDepartment = {
  DECK: 'DECK',
  ENGINE: 'ENGINE',
  CATERING: 'CATERING'
};

exports.VesselRole = exports.$Enums.VesselRole = {
  CAPTAIN: 'CAPTAIN',
  SECOND_COOK: 'SECOND_COOK',
  SECOND_ENGINEER: 'SECOND_ENGINEER',
  SECOND_ENGINEER_NCV: 'SECOND_ENGINEER_NCV',
  SECOND_OFFICER: 'SECOND_OFFICER',
  THIRD_ENGINEER: 'THIRD_ENGINEER',
  THIRD_OFFICER: 'THIRD_OFFICER',
  FOURTH_ENGINEER: 'FOURTH_ENGINEER',
  FOURTH_ENGINEER_NCV: 'FOURTH_ENGINEER_NCV',
  FIFTH_ENGINEER: 'FIFTH_ENGINEER',
  AB: 'AB',
  ADDL_SECOND_ENGINEER: 'ADDL_SECOND_ENGINEER',
  ADDL_SECOND_OFFICER: 'ADDL_SECOND_OFFICER',
  ADDL_THIRD_ENGINEER: 'ADDL_THIRD_ENGINEER',
  ADDL_CHIEF_ENGINEER: 'ADDL_CHIEF_ENGINEER',
  ADDL_CHIEF_OFFICER: 'ADDL_CHIEF_OFFICER',
  ADD_MASTER: 'ADD_MASTER',
  ASST_ELECTRICAL_OFFICER: 'ASST_ELECTRICAL_OFFICER',
  BAR_TENDER: 'BAR_TENDER',
  BOSUN: 'BOSUN',
  CABIN_ATTENDANT: 'CABIN_ATTENDANT',
  CARGO_ENGINEER: 'CARGO_ENGINEER',
  CHEF: 'CHEF',
  CHIEF_COOK: 'CHIEF_COOK',
  CHIEF_ENGINEER: 'CHIEF_ENGINEER',
  CHIEF_ENGINEER_NCV: 'CHIEF_ENGINEER_NCV',
  CHIEF_OFFICER: 'CHIEF_OFFICER',
  CHIEF_OFFICER_NCV: 'CHIEF_OFFICER_NCV',
  CHIEF_STEWARD: 'CHIEF_STEWARD',
  CRANE_OPERATOR: 'CRANE_OPERATOR',
  DECK_CADET: 'DECK_CADET',
  DECK_FITTER: 'DECK_FITTER',
  DIVE_ELECTRICAL_TECHNICIAN: 'DIVE_ELECTRICAL_TECHNICIAN',
  DPO: 'DPO',
  DPO_SECOND_OFFICER: 'DPO_SECOND_OFFICER',
  DPO_THIRD_OFFICER: 'DPO_THIRD_OFFICER',
  DPO_CHIEF_OFFICER: 'DPO_CHIEF_OFFICER',
  DPO_MASTER: 'DPO_MASTER',
  DREDGER_CUTTER_OPERATOR: 'DREDGER_CUTTER_OPERATOR',
  DREDGER_ENGINEER: 'DREDGER_ENGINEER',
  DUAL_CADET: 'DUAL_CADET',
  ELECTRICAL_ENGINEER: 'ELECTRICAL_ENGINEER',
  ELECTRICAL_OFFICER: 'ELECTRICAL_OFFICER',
  ELECTRO_TECHNICAL_ENGINEER: 'ELECTRO_TECHNICAL_ENGINEER',
  ENGINE_FITTER: 'ENGINE_FITTER',
  EXTRA_MASTER: 'EXTRA_MASTER',
  FITTER: 'FITTER',
  GAS_ENGINEER: 'GAS_ENGINEER',
  GP: 'GP',
  HOTEL_MANAGER: 'HOTEL_MANAGER',
  INFOTECH: 'INFOTECH',
  INLAND_MASTER: 'INLAND_MASTER',
  INSTRUCTOR: 'INSTRUCTOR',
  INTERNAL_AUDITOR: 'INTERNAL_AUDITOR',
  JR_DPO_CHIEF_OFFICER: 'JR_DPO_CHIEF_OFFICER',
  JUNIOR_THIRD_OFFICER: 'JUNIOR_THIRD_OFFICER',
  JUNIOR_FOURTH_OFFICER: 'JUNIOR_FOURTH_OFFICER',
  JUNIOR_DPO: 'JUNIOR_DPO',
  JUNIOR_ENGINEER: 'JUNIOR_ENGINEER',
  JUNIOR_OFFICER: 'JUNIOR_OFFICER',
  LAUNDRYMAN: 'LAUNDRYMAN',
  MARINE_CONSULTANCY: 'MARINE_CONSULTANCY',
  MASTER: 'MASTER',
  MASTER_MARINER: 'MASTER_MARINER',
  MASTER_NCV: 'MASTER_NCV',
  MOTORMAN: 'MOTORMAN',
  MUSICIAN: 'MUSICIAN',
  NCV_NWKO: 'NCV_NWKO',
  OFFSHORE_INSTALLATION: 'OFFSHORE_INSTALLATION',
  OILER: 'OILER',
  OS: 'OS',
  PERSONNEL_MANAGER: 'PERSONNEL_MANAGER',
  PIPE_OPERATOR: 'PIPE_OPERATOR',
  PORT_OPERATION: 'PORT_OPERATION',
  PUMPMAN: 'PUMPMAN',
  PURSER: 'PURSER',
  RADIO_OFFICER: 'RADIO_OFFICER',
  REEFER_ENGINEER: 'REEFER_ENGINEER',
  REEFER_MECHANIC: 'REEFER_MECHANIC',
  REPAIR_YARD_DD: 'REPAIR_YARD_DD',
  RIGGER: 'RIGGER',
  ROUSTABOUT: 'ROUSTABOUT',
  SAFETY_OFFICER: 'SAFETY_OFFICER',
  SOUS_CHEF: 'SOUS_CHEF',
  SPORTS_DIRECTOR: 'SPORTS_DIRECTOR',
  SR_DPO_CHIEF_OFFICER: 'SR_DPO_CHIEF_OFFICER',
  SR_DPO_MASTER: 'SR_DPO_MASTER',
  STEWARD: 'STEWARD',
  SUPERINTENDENT: 'SUPERINTENDENT',
  TECHNICAL_MANAGER: 'TECHNICAL_MANAGER',
  TRAINEE_C_E: 'TRAINEE_C_E',
  TRAINEE_CADET: 'TRAINEE_CADET',
  TRAINEE_ELECTRICAL_OFFICER: 'TRAINEE_ELECTRICAL_OFFICER',
  TRAINEE_ENGINEER: 'TRAINEE_ENGINEER',
  TRAVEL_COORDINATOR: 'TRAVEL_COORDINATOR',
  TRAVEL_FITTER: 'TRAVEL_FITTER',
  TRAVEL_WIPER: 'TRAVEL_WIPER',
  TUBE_OPERATOR: 'TUBE_OPERATOR',
  TUG_HANDLER: 'TUG_HANDLER',
  VOY_REP_STAFF: 'VOY_REP_STAFF',
  WIPER: 'WIPER'
};

exports.CrewStatus = exports.$Enums.CrewStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  ON_LEAVE: 'ON_LEAVE'
};

exports.DraftStatus = exports.$Enums.DraftStatus = {
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED'
};

exports.VesselType = exports.$Enums.VesselType = {
  ACCOMMODATION: 'ACCOMMODATION',
  AHT: 'AHT',
  AHTS: 'AHTS',
  AHTS_DP_I: 'AHTS_DP_I',
  AHTS_DP_II: 'AHTS_DP_II',
  AHTS_DP_III: 'AHTS_DP_III',
  BARGE: 'BARGE',
  BITUMEN_TANKER: 'BITUMEN_TANKER',
  BULK_CARRIER: 'BULK_CARRIER',
  BUNKER_TANKER: 'BUNKER_TANKER',
  CAPE_BULK: 'CAPE_BULK',
  CAR_CARRIER: 'CAR_CARRIER',
  CELLULAR_CONTAINER: 'CELLULAR_CONTAINER',
  CEMENT_CARRIER: 'CEMENT_CARRIER',
  CHEMICAL_TANKER: 'CHEMICAL_TANKER',
  COASTAL_VESSEL: 'COASTAL_VESSEL',
  CONTAINER: 'CONTAINER',
  CONTAINER_VESSEL: 'CONTAINER_VESSEL',
  CRUDE_OIL_TANKER: 'CRUDE_OIL_TANKER',
  CRUISE_SHIP: 'CRUISE_SHIP',
  DEMOLITION_VESSEL: 'DEMOLITION_VESSEL',
  DP: 'DP',
  DP_I: 'DP_I',
  DP_II: 'DP_II',
  DP_III: 'DP_III',
  DPII_ROV: 'DPII_ROV',
  DREDGER: 'DREDGER',
  DRILL_SHIP: 'DRILL_SHIP',
  DRILL_SHIP_DP_I: 'DRILL_SHIP_DP_I',
  DRILL_SHIP_DP_II: 'DRILL_SHIP_DP_II',
  DRILL_SHIP_DP_III: 'DRILL_SHIP_DP_III',
  DRILLING_RIG: 'DRILLING_RIG',
  DRY_CARGO: 'DRY_CARGO',
  DRY_CARGO_VESSEL: 'DRY_CARGO_VESSEL',
  DSV: 'DSV',
  DSV_DP_I: 'DSV_DP_I',
  DSV_DP_II: 'DSV_DP_II',
  DSV_DP_III: 'DSV_DP_III',
  FFSV: 'FFSV',
  FISHING_VESSEL: 'FISHING_VESSEL',
  FPSO: 'FPSO',
  FSO: 'FSO',
  GEAR_BULK: 'GEAR_BULK',
  GENERAL_CARGO: 'GENERAL_CARGO',
  GTV: 'GTV',
  HEAVY_LIFT: 'HEAVY_LIFT',
  HOPPER_BARGE: 'HOPPER_BARGE',
  JACK_UP_BARGE: 'JACK_UP_BARGE',
  JACK_UP_RIG: 'JACK_UP_RIG',
  LEGC_ETHYLENE_CARRIERS: 'LEGC_ETHYLENE_CARRIERS',
  LIVESTOCK_CARRIER: 'LIVESTOCK_CARRIER',
  LNG_CARRIER: 'LNG_CARRIER',
  LPG_CARRIER: 'LPG_CARRIER',
  LUXURY_YACHT: 'LUXURY_YACHT',
  MINI_BULK_CARRIER: 'MINI_BULK_CARRIER',
  MLP: 'MLP',
  MR_TANKER: 'MR_TANKER',
  MSV: 'MSV',
  MSV_DP_I: 'MSV_DP_I',
  MSV_DP_II: 'MSV_DP_II',
  MSV_DP_III: 'MSV_DP_III',
  MULTI_PURPOSE: 'MULTI_PURPOSE',
  OBO: 'OBO',
  OFFSHORE_RESEARCH_VESSEL: 'OFFSHORE_RESEARCH_VESSEL',
  OFFSHORE_SUPPLY: 'OFFSHORE_SUPPLY',
  OFFSHORE_SUPPLY_VESSEL: 'OFFSHORE_SUPPLY_VESSEL',
  OIL_CHEM_TANKER: 'OIL_CHEM_TANKER',
  OIL_TANKER: 'OIL_TANKER',
  OSV: 'OSV',
  OSV_DP_I: 'OSV_DP_I',
  OSV_DP_II: 'OSV_DP_II',
  OSV_DP_III: 'OSV_DP_III',
  PASSENGER_CRUISE_VESSEL: 'PASSENGER_CRUISE_VESSEL',
  PASSENGER_SHIP: 'PASSENGER_SHIP',
  PIPELAYING_VESSEL: 'PIPELAYING_VESSEL',
  PRODUCT_TANKER: 'PRODUCT_TANKER',
  PSV: 'PSV',
  PSV_DP_I: 'PSV_DP_I',
  PSV_DP_II: 'PSV_DP_II',
  PSV_DP_III: 'PSV_DP_III',
  PURE_CAR_TRUCK_CARRIER: 'PURE_CAR_TRUCK_CARRIER',
  REEFER: 'REEFER',
  REEFER_CONTAINER: 'REEFER_CONTAINER',
  REEFER_CONTAINER_VESSEL: 'REEFER_CONTAINER_VESSEL',
  REEFER_VESSEL: 'REEFER_VESSEL',
  RIG: 'RIG',
  RO_RO_VESSEL: 'RO_RO_VESSEL',
  ROPAX_VESSEL: 'ROPAX_VESSEL',
  RORO_PASSENGER: 'RORO_PASSENGER',
  SAND_BARGE: 'SAND_BARGE',
  SELF_UNLOADER_BULK_VESSEL: 'SELF_UNLOADER_BULK_VESSEL',
  SP_SURVEY_VESSEL: 'SP_SURVEY_VESSEL',
  SUPPLY_UTILITY_VESSEL: 'SUPPLY_UTILITY_VESSEL',
  TNC: 'TNC',
  TRANSHIPPER: 'TRANSHIPPER',
  TUG: 'TUG',
  ULCC: 'ULCC',
  VLCC: 'VLCC',
  VLEC: 'VLEC',
  VLGC: 'VLGC',
  VLOC: 'VLOC',
  WAR_SHIP: 'WAR_SHIP',
  WOOD_LOG_CARRIER: 'WOOD_LOG_CARRIER'
};

exports.EngineMake = exports.$Enums.EngineMake = {
  ABB_STROMBERG: 'ABB_STROMBERG',
  AKASAKA: 'AKASAKA',
  BW_6GFVT2BF: 'BW_6GFVT2BF',
  BW_6560MC: 'BW_6560MC',
  BW_6S70MC_C: 'BW_6S70MC_C',
  BW_GFCA: 'BW_GFCA',
  BW_KEF: 'BW_KEF',
  BW_KGF: 'BW_KGF',
  BW_LMC: 'BW_LMC',
  BW_MC: 'BW_MC',
  BW_MC_C: 'BW_MC_C',
  BW_ME_B: 'BW_ME_B',
  BW_ME_C: 'BW_ME_C',
  BW_SMC: 'BW_SMC',
  BW_ST_X: 'BW_ST_X',
  BERGEN: 'BERGEN',
  BMZ_MAN_BW_7S50MC_C: 'BMZ_MAN_BW_7S50MC_C',
  CATERPILLAR: 'CATERPILLAR',
  CUMMINS_KTA50: 'CUMMINS_KTA50',
  DAIHATSU: 'DAIHATSU',
  DALIAN_SULZER: 'DALIAN_SULZER',
  DEUTZ: 'DEUTZ',
  DIESEL: 'DIESEL',
  DMD_SULZER: 'DMD_SULZER',
  GN8320ZC4B: 'GN8320ZC4B',
  HITACHI: 'HITACHI',
  HYUNDAI_MAN_BW_7_S_60_MC_C_MK_7: 'HYUNDAI_MAN_BW_7_S_60_MC_C_MK_7',
  Hyundai_MAN_BW_7S60MC_Mk_6: 'Hyundai_MAN_BW_7S60MC_Mk_6',
  JAPAN_ENGINE: 'JAPAN_ENGINE',
  KAWASAKI_MAN_BW: 'KAWASAKI_MAN_BW',
  KAWASAKI_HEAVY: 'KAWASAKI_HEAVY',
  KOBE_DIESEL: 'KOBE_DIESEL',
  KRUPP_MAK: 'KRUPP_MAK',
  MAK: 'MAK',
  MAN: 'MAN',
  MAN_6G50ME_B9_3: 'MAN_6G50ME_B9_3',
  MAN_BW: 'MAN_BW',
  MAN_BW_5S70MC: 'MAN_BW_5S70MC',
  MAN_BW_6S50MC_C: 'MAN_BW_6S50MC_C',
  MAN_BW_6S60MC_C: 'MAN_BW_6S60MC_C',
  MAN_BW_6S90MC: 'MAN_BW_6S90MC',
  MAN_BW_7S60_MC: 'MAN_BW_7S60_MC',
  MAN_BW_7S60MC_C: 'MAN_BW_7S60MC_C',
  MAN_BW_L32_40_MAN_BW_DIESEL_8L32_40: 'MAN_BW_L32_40_MAN_BW_DIESEL_8L32_40',
  MITSUBISHI: 'MITSUBISHI',
  MITSUBISHI_AKASAKA: 'MITSUBISHI_AKASAKA',
  MITSUBISHI_AKASAKA_DIESEL: 'MITSUBISHI_AKASAKA_DIESEL',
  MITSUBISHI_HEAVY: 'MITSUBISHI_HEAVY',
  MITSUBISHI_UEC: 'MITSUBISHI_UEC',
  MITSUI_MAN_BW: 'MITSUI_MAN_BW',
  MWM: 'MWM',
  NIIGATA: 'NIIGATA',
  NIPPATSU: 'NIPPATSU',
  PIELSTICK: 'PIELSTICK',
  STORK_WERKSPOR_DIESEL: 'STORK_WERKSPOR_DIESEL',
  SULZER: 'SULZER',
  SULZER_RD: 'SULZER_RD',
  SULZER_RLB: 'SULZER_RLB',
  SULZER_RND: 'SULZER_RND',
  SULZER_RT_FLEX: 'SULZER_RT_FLEX',
  SULZER_RTA: 'SULZER_RTA',
  WARTSILLA: 'WARTSILLA',
  WARTSILLA_DIESEL_BV: 'WARTSILLA_DIESEL_BV',
  YANMAR: 'YANMAR'
};

exports.TonnageUnit = exports.$Enums.TonnageUnit = {
  BHP: 'BHP',
  CEUs: 'CEUs',
  DWT: 'DWT',
  GRT: 'GRT',
  KW: 'KW',
  LIMS: 'LIMS',
  M3: 'M3',
  TEUs: 'TEUs'
};

exports.VesselUserRole = exports.$Enums.VesselUserRole = {
  VESSEL_ADMIN: 'VESSEL_ADMIN'
};

exports.DocumentType = exports.$Enums.DocumentType = {
  PASSPORT: 'PASSPORT',
  VISA: 'VISA',
  CERTIFICATE: 'CERTIFICATE',
  CONTRACT: 'CONTRACT',
  OTHER: 'OTHER'
};

exports.ConsultancyCategory = exports.$Enums.ConsultancyCategory = {
  MARINE: 'MARINE',
  LEGAL: 'LEGAL',
  AUDIT: 'AUDIT',
  TRAINING: 'TRAINING',
  MEDICAL: 'MEDICAL'
};

exports.TrainingType = exports.$Enums.TrainingType = {
  INTERNAL: 'INTERNAL',
  EXTERNAL: 'EXTERNAL'
};

exports.Prisma.ModelName = {
  Organization: 'Organization',
  User: 'User',
  AuditLog: 'AuditLog',
  Crew: 'Crew',
  CrewOnboardingDraft: 'CrewOnboardingDraft',
  Vessel: 'Vessel',
  VesselUserRoleMap: 'VesselUserRoleMap',
  VesselRankRequirement: 'VesselRankRequirement',
  Document: 'Document',
  VesselAssignment: 'VesselAssignment',
  ConsultancyPartner: 'ConsultancyPartner',
  TrainingPartner: 'TrainingPartner',
  Course: 'Course',
  TrainingRecord: 'TrainingRecord'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
